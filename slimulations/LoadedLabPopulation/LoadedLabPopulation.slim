initialize() {
	// setSeed(2073423208520);
	setSeed(rdunif(1, 0, asInteger(2^62) - 1));
	initializeSLiMModelType("nonWF");
	defineConstantIfNotExist("sexed",T);
	defineConstantIfNotExist("femaleOnlyEffect",F);
	defineConstantIfNotExist("mutsFrequency",0.05);
	defineConstantIfNotExist("mutsCount",40);
	defineConstantIfNotExist("mutsHetFitnessDiff",0.000);
	defineConstantIfNotExist("homozygousSterilityChance",1.0);
	defineConstantIfNotExist("genomeSize",40);
	defineConstantIfNotExist("migrantsSize",10);
	// WARNING: undefined for subpopsSexEvenlyDistributed=F && subpopsMutationsEvenlyDistributed=T
	defineConstantIfNotExist("subpopsMutationsEvenlyDistributed",T);
	defineConstantIfNotExist("subpopsSexEvenlyDistributed",T);
	defineConstantIfNotExist("sterility",F);
	defineConstantIfNotExist("xlinked",F);
	defineConstantIfNotExist("maximalAverageFemaleOffspring",2.2);
	defineConstantIfNotExist("carryingCapacity",1000);
	defineConstantIfNotExist("outputFilePath","../data/out1.csv");
	defineConstantIfNotExist("recombinationRate",2.12e-8);
	//	WARNING: spacing between mutations untested if mutations % chromosomeCount != 0
	defineConstantIfNotExist("chromosomeCount",2);
	// WARNING: max is 10,000 without further edits
	defineConstantIfNotExist("maxGenerations",100);
	defineGlobal("femaleReproductiveOutput", c(0.0,0.0));
	
	initializeMutationRate(0.0);
	initializeMutationType("m0", 0.5, "f", 0.0);
	initializeGenomicElementType("g0", m0, 1.0);
	initializeGenomicElement(g0, 0, genomeSize-1);
	// setup chromosomes
	rates = c(0.5, recombinationRate, rep(c(0.5,recombinationRate),chromosomeCount-1));
	ends = integer(0);
	for (i in seqLen(max(chromosomeCount,0))) {
		ends = c(ends,chromosomePosition(i));
	}
	initializeRecombinationRate(rates, ends);
	if (sexed) {
		initializeSex(xlinked ? "X" else "A");
	}
	
	
	for (i in seqLen(mutsCount)+1) {
		mut = initializeMutationType("m"+asString(i) , 1.0, "f", mutsHetFitnessDiff);
		mut.color = "green"; 
	}
	//debug colours
	mut = initializeMutationType("m"+asString(mutsCount+1) , 1.0, "f", mutsHetFitnessDiff);
	mut.color = "red"; 
	mut = initializeMutationType("m"+asString(mutsCount+2) , 1.0, "f", mutsHetFitnessDiff);
	mut.color = "blue"; 
}

function (integer)chromosomePosition(integer$ chromosome) {
	return c(asInteger(round(genomeSize*chromosome/chromosomeCount)), asInteger(round(genomeSize*(chromosome+1)/chromosomeCount)-1));
}

function (void)defineConstantIfNotExist(string$ symbol, * value) {
	if (!exists(symbol)) {
		defineConstant(symbol,value);	
	}
}

1 early() {
	if (subpopsMutationsEvenlyDistributed) {
		sim.addSubpop(0, 0);
		sim.addSubpop(1, migrantsSize);
		//stats
		defineConstant("foundingMalesCount",sum(sim.subpopulations[1].individuals.sex=="M"));
	}
	else {
		sim.addSubpop(0, carryingCapacity);
		sim.addSubpop(1, 0);
	}
}

1 late() {
	// add mutations
	muts = community.allMutationTypes;
	inds = sim.subpopulations.individuals;
	possibleCarrierGenome1s = inds.genome1[!(inds.genome1.isNullGenome)];
	possibleCarrierGenome2s = inds.genome2[!(inds.genome2.isNullGenome)];
	possibleCarrierGenomes = c(possibleCarrierGenome1s,possibleCarrierGenome2s);
	//debug markers
	possibleCarrierGenome1s.addNewDrawnMutation(muts[mutsCount+1], 1);
	possibleCarrierGenome2s.addNewDrawnMutation(muts[mutsCount+2], 2);
	if (subpopsMutationsEvenlyDistributed) { 
		chromosomeI = -1;
		genomeI = 0;
		mutsPerChromosome = mutsCount/chromosomeCount;
	}
	for (i in seqLen(mutsCount)) {
		if (subpopsMutationsEvenlyDistributed) {
			if ((i % (mutsPerChromosome/2))==0) {
				chromosomeI = chromosomeI + 1;
			}
			if (chromosomeI >= chromosomeCount) {
				chromosomeI = 0;
				genomeI = (genomeI + 1) % 2;
			}
			chromosomePos = chromosomePosition(chromosomeI);
			genomesNeeded =asInteger(round(size(inds)*mutsFrequency*2));
			startSample =((i)*genomesNeeded % size(inds));
			endSample = (((i+1)*genomesNeeded -1) % size(inds));
			print("a");
			print(startSample);
			print(endSample);
			
			if (startSample <= endSample){
				sampledGenomes = (genomeI == 1 ? possibleCarrierGenome1s else possibleCarrierGenome2s)[startSample:endSample];
			} else {
				// we are sampling a bit of each chromosome in the pair, doesn't matter in the scheme of things...
				sampledGenomes = (genomeI == 1 ? 
					c(possibleCarrierGenome1s[startSample:(size(possibleCarrierGenome1s)-1)],possibleCarrierGenome2s[0:endSample]) else 
					c(possibleCarrierGenome2s[startSample:(size(possibleCarrierGenome2s)-1)],possibleCarrierGenome1s[0:endSample]));
				genomeI = (genomeI + 1) % 2;
			
			}
//			print(asInteger((chromosomePos[1]-chromosomePos[0])*(((i%mutsPerChromosome)/(max(mutsPerChromosome-1,1.0))))+chromosomePos[0]));
			sampledGenomes.addNewDrawnMutation(muts[i+1], asInteger(round((chromosomePos[1]-chromosomePos[0])*((((2*i+genomeI)%mutsPerChromosome)/max(mutsPerChromosome-1,1.0)))+chromosomePos[0])));
		}
		else { 
			sample(
				possibleCarrierGenomes, 
				asInteger(round(mutsFrequency*size(possibleCarrierGenomes)))
			).addNewDrawnMutation(muts[i+1], asInteger(round(genomeSize*(i)/mutsCount)));
		}
	}
	if (!subpopsMutationsEvenlyDistributed) {
		
		// create founder population
		if (size(sim.subpopulations[0].individuals) > migrantsSize) {
			if (subpopsSexEvenlyDistributed) {
				inds = sim.subpopulations[0].individuals;
				males = asInteger(floor(migrantsSize/2));
				migrants = sample(inds[inds.sex=="M"], males);
				migrants = c(migrants,sample(inds[inds.sex=="F"], migrantsSize-males));
			}
			else {
				migrants = sample(sim.subpopulations[0].individuals, migrantsSize);
			}
			sim.subpopulations[1].takeMigrants(migrants);
		}
		// kill core since no longer needed
		sim.killIndividuals(sim.subpopulations[0].individuals);
		//stats
		defineConstant("foundingMalesCount",sum(migrants.sex=="M"));
	}
//	print(inds[1].genome1.)
	
}

first() {
	//reproductive output calculations
	for (subpop in sim.subpopulations)
	{
		if (subpop.individualCount==0) {
			femaleReproductiveOutput[subpop.id]=0;
			next;
		}
		femaleCount = !sexed ? size(subpop.individuals) else size(subpop.individuals[subpop.individuals.sex =="F"]);
		femaleReproductiveOutput[subpop.id] = carryingCapacity*maximalAverageFemaleOffspring/(carryingCapacity + maximalAverageFemaleOffspring*femaleCount - subpop.individualCount);
	}
}


reproduction() {
	if (sexed)
		if (individual.sex!="F")
			return;
	
	//steriles dont reproduce
	if (sterility)
		if (any(2<=copiesOfMutations(individual, community.allMutationTypes[1:mutsCount])))
			return;
	//produce offspring
	growthRate=max(femaleReproductiveOutput[subpop.id],-1.9999999);
	for (i in seqLen(rpois(1, growthRate))) {
		mate = sexed ? subpop.sampleIndividuals(1, sex="M") else subpop.sampleIndividuals(1);	
		if (size(mate)) {
			//sterile males dont reproduce
			if (!femaleOnlyEffect)
				if (sterility)
					if (any(2<=copiesOfMutations(mate, community.allMutationTypes[1:mutsCount])))
						next;
			
			subpop.addCrossed(individual, mate);
		}
	}
}

modifyChild() {
	////lethals die
	if (sterility)
		return T;
	if (sexed)
		if (femaleOnlyEffect)
   		if (child.sex!="F")
				return T;
		
	return !any(2<=copiesOfMutations(child, community.allMutationTypes[1:mutsCount]));
		 
}

function (integer)copiesOfMutations(o<Individual>$ ind, o<MutationType> mutTypes) {	
	out = c();
	for (mutType in mutTypes) {
		mut = sim.mutationsOfType(mutType);
		//mutation present
		if (size(mut) != 1) {
			out = c(out,0);
			next;
		}
			
		//copies
		hasMutOnChromosome1 = ind.genome1.containsMutations(mut);
		hasMutOnChromosome2 = ind.genome2.containsMutations(mut);
		out = c(out, asInteger(hasMutOnChromosome1) + asInteger(hasMutOnChromosome2));
	}
	return out;
}

early() {
	//kill old individuals
	inds = sim.subpopulations.individuals; 
	sim.killIndividuals(inds[inds.age >= 1]);
}

1:9999 late() {
	//end condition 1: population crash
	if (size(sim.subpopulations[1].individuals) == 0) {
		cat("EXTINCT\n");
		if (!exists("slimgui")) writeOutputData("EXTINCT");
		sim.simulationFinished();
		return;
	}
	//end condition 2: survival
	if (size(sim.subpopulations[1].individuals) >= carryingCapacity) {
		cat("SURVIVED\n");
		if (!exists("slimgui")) writeOutputData("SURVIVED");
		sim.simulationFinished();
		return;
	}
	//end condition 3: long term suppression
	if (sim.cycle>maxGenerations){
		result = "LOADED_SURVIVAL";
		cat(result+"\n");
		if (!exists("slimgui")) writeOutputData(result);
		sim.simulationFinished();
		return;
	}
	
}

10000 late() {
	//end condition 3: long term suppression
	result = "LOADED_SURVIVAL";
	cat(result+"\n");
	if (!exists("slimgui")) writeOutputData(result);
	sim.simulationFinished();

}

function (void)writeOutputData(string result) {
	writeFile(outputFilePath, 
		asString(getSeed())+","+ 
		asString(result)+","+
		asString(sim.cycle)+","+
		asString(foundingMalesCount)+","+
		asString(migrantsSize)+","+
		asString(maximalAverageFemaleOffspring)+","+
		asString(recombinationRate)+","+
		asString(chromosomeCount)+","+
		asString(maxGenerations)+","+
		asString(carryingCapacity)+","+
		asString(mutsFrequency)+","+
		asString(mutsCount)+","+
		asString(sterility)+","+
		asString(xlinked)+","+
		asString(femaleOnlyEffect)
	, append = T);
}