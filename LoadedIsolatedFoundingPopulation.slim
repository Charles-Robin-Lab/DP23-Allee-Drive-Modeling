initialize() {
	initializeSLiMModelType("nonWF");
	defineConstantIfNotExist("mutsFrequency",0.13);
	defineConstantIfNotExist("mutsCount",10);
	defineConstantIfNotExist("mutsHetFitness",0.000);
	defineConstantIfNotExist("homozygousSterilityChance",1.0);
	defineConstantIfNotExist("genomeSize",99999);
	defineConstantIfNotExist("migrantsSize",20);
	defineConstantIfNotExist("sterility",T);
	defineConstantIfNotExist("xlinked",T);
	defineConstantIfNotExist("maximalGrowthRate",0.5);
	defineConstantIfNotExist("carryingCapacity",1000);
	defineConstantIfNotExist("outputFilePath","./out1");
	
	initializeMutationRate(0.0);
	initializeMutationType("m0", 0.5, "f", 0.0);
	initializeGenomicElementType("g0", m0, 1.0);
	initializeGenomicElement(g0, 0, genomeSize);
	initializeRecombinationRate(1e-8);
	initializeSex(xlinked ? "X" else "A");
	
	for (i in 1:mutsCount) {
		mut = initializeMutationType("m"+asString(i) , 1.0, "f", mutsHetFitness);
		mut.color = "green"; 
//		gelement = initializeGenomicElementType("g"+asString(i), mut, 1.0);
//		initializeGenomicElement(gelement, asInteger(genomeSize/mutsCount*(i-1)), asInteger(genomeSize/mutsCount*i-1));
	}
}

1 early() {
	sim.addSubpop(0, 500);
	sim.addSubpop(1, 0);
}

early() {
	//kill old individuals
	inds = sim.subpopulations.individuals; 
	sim.killIndividuals(inds[inds.age >= 1]);
}

// add mutations
10 late() {
	muts = community.allMutationTypes;
	possibleCarrierChromosomes = sim.subpopulations.individuals.genomes[!(sim.subpopulations.individuals.genomes.isNullGenome)];
	for (i in 0:(mutsCount-1)) {
		
		sample(
			possibleCarrierChromosomes, 
			asInteger(mutsFrequency*size(possibleCarrierChromosomes))
		).addNewDrawnMutation(muts[i], asInteger(genomeSize/mutsCount*i));
	}
}

// create founder population
11 late() {
	migrants = sample(sim.subpopulations[0].individuals, migrantsSize);
	sim.subpopulations[1].takeMigrants(migrants);
	// kill since no longer needed
	sim.killIndividuals(sim.subpopulations[0].individuals);
	
	//stats
	defineConstant("foundingMalesCount",sum(migrants.sex=="M"));
}


30:10000 late() {
	//end condition 1: population crash
	if (size(sim.subpopulations[1].individuals) == 0) {
		cat("EXTINCT\n");
		writeOutputData("EXTINCT");
		sim.simulationFinished();
	}
	//end condition 2: survival
	if (size(sim.subpopulations[1].individuals) >= 1.05*carryingCapacity) {
		cat("SURVIVED\n");
		writeOutputData("SURVIVED");
		sim.simulationFinished();
	}
	
}
250 late() {
	// //end condition 2: long term survival
	// result = ifelse(size(sim.subpopulations[1].individuals) >= 0.6*carryingCapacity,"SURVIVED","UNDECIDED");
	// cat(result+"\n");
	// writeOutputData(result);
	// sim.simulationFinished();

}

reproduction(NULL, "F") {
	//steriles dont reproduce
	if (sterility)
		if (any(2<=copiesOfMutations(individual, community.allMutationTypes)))
			return;
	
	//produce offspring
	growthRate=max(maximalGrowthRate*(1-subpop.individualCount/carryingCapacity),-1.9999999);
	for (i in seqLen(rpois(1, growthRate+2))) {
		mate = subpop.sampleIndividuals(1, sex="M");	
		if (size(mate)) {
			subpop.addCrossed(individual, mate);
		}
	}
}

modifyChild() {
	//lethals die
	if (sterility)
		return T;
	if (child.sex!="F")
		return T;
	return !any(2<=copiesOfMutations(child, community.allMutationTypes));
		 
}

function (integer)copiesOfMutations(o<Individual>$ ind, o<MutationType> mutTypes) {	
	out = c();
	for (mutType in mutTypes) {
		mut = sim.mutationsOfType(mutType);
		//mutation present
		if (size(mut) != 1) {
			out = c(out,0);
			next;
		}
			
		//copies
		hasMutOnChromosome1 = ind.genome1.containsMutations(mut);
		hasMutOnChromosome2 = ind.genome2.containsMutations(mut);
		out = c(out, asInteger(hasMutOnChromosome1) + asInteger(hasMutOnChromosome2));
	}
	return out;
}

function (void)writeOutputData(string result) {
	writeFile(outputFilePath, 
		asString(getSeed())+","+ 
		asString(result)+","+
		asString(mutsFrequency)+","+
		asString(mutsCount)+","+
		asString(maximalGrowthRate)+","+
		asString(migrantsSize)+","+
		asString(foundingMalesCount)+","+
		asString(sterility)+","+
		asString(xlinked)
	, append = T);
}

function (void)defineConstantIfNotExist(string$ symbol, * value) {
	if (!exists(symbol)) {
		defineConstant(symbol,value);	
	}
}